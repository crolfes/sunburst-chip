diff --git a/rtl/gpio.sv b/rtl/gpio.sv
index ae7aaf993a..6ac948077d 100644
--- a/rtl/gpio.sv
+++ b/rtl/gpio.sv
@@ -147,10 +147,7 @@ module gpio
     .tl_o,
 
     .reg2hw,
-    .hw2reg,
-
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o ()
+    .hw2reg
   );
 
   // Assert Known: Outputs
diff --git a//rtl/gpio_reg_top.sv b/rtl/gpio_reg_top.sv
index 7fb63025ba..8de3c57a86 100644
--- a/rtl/gpio_reg_top.sv
+++ b/rtl/gpio_reg_top.sv
@@ -13,10 +13,7 @@ module gpio_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output gpio_reg_pkg::gpio_reg2hw_t reg2hw, // Write
-  input  gpio_reg_pkg::gpio_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  gpio_reg_pkg::gpio_hw2reg_t hw2reg  // Read
 );
 
   import gpio_reg_pkg::* ;
@@ -42,40 +39,6 @@ module gpio_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [15:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(16)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -116,7 +79,7 @@ module gpio_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -737,27 +700,6 @@ module gpio_reg_top (
 
   assign ctrl_en_input_filter_wd = reg_wdata[31:0];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = 1'b0;
-    reg_we_check[5] = direct_out_we;
-    reg_we_check[6] = masked_out_lower_we;
-    reg_we_check[7] = masked_out_upper_we;
-    reg_we_check[8] = direct_oe_we;
-    reg_we_check[9] = masked_oe_lower_we;
-    reg_we_check[10] = masked_oe_upper_we;
-    reg_we_check[11] = intr_ctrl_en_rising_we;
-    reg_we_check[12] = intr_ctrl_en_falling_we;
-    reg_we_check[13] = intr_ctrl_en_lvlhigh_we;
-    reg_we_check[14] = intr_ctrl_en_lvllow_we;
-    reg_we_check[15] = ctrl_en_input_filter_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
