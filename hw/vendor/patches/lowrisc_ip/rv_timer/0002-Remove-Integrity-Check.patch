diff --git a/rtl/rv_timer.sv b/rtl/rv_timer.sv
index ab6239902e..993683069d 100644
--- a/rtl/rv_timer.sv
+++ b/rtl/rv_timer.sv
@@ -114,10 +114,7 @@ module rv_timer import rv_timer_reg_pkg::*; (
     .tl_o,
 
     .reg2hw,
-    .hw2reg,
-
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (0)
+    .hw2reg
   );
 
   ////////////////
diff --git a/rtl/rv_timer_reg_top.sv b/rtl/rv_timer_reg_top.sv
index fa6992a783..225a042556 100644
--- a/rtl/rv_timer_reg_top.sv
+++ b/rtl/rv_timer_reg_top.sv
@@ -13,10 +13,7 @@ module rv_timer_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output rv_timer_reg_pkg::rv_timer_reg2hw_t reg2hw, // Write
-  input  rv_timer_reg_pkg::rv_timer_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  rv_timer_reg_pkg::rv_timer_hw2reg_t hw2reg  // Read
 );
 
   import rv_timer_reg_pkg::* ;
@@ -42,40 +39,6 @@ module rv_timer_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [9:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(10)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -116,7 +79,7 @@ module rv_timer_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -540,21 +503,6 @@ module rv_timer_reg_top (
 
   assign compare_upper0_0_wd = reg_wdata[31:0];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = alert_test_we;
-    reg_we_check[1] = ctrl_we;
-    reg_we_check[2] = intr_enable0_we;
-    reg_we_check[3] = intr_state0_we;
-    reg_we_check[4] = intr_test0_we;
-    reg_we_check[5] = cfg0_we;
-    reg_we_check[6] = timer_v_lower0_we;
-    reg_we_check[7] = timer_v_upper0_we;
-    reg_we_check[8] = compare_lower0_0_we;
-    reg_we_check[9] = compare_upper0_0_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
