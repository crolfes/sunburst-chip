diff --git a/rtl/aon_timer.sv b/rtl/aon_timer.sv
index b04497dae0..5ed5d23857 100644
--- a/rtl/aon_timer.sv
+++ b/rtl/aon_timer.sv
@@ -87,9 +88,7 @@ module aon_timer import aon_timer_reg_pkg::*;
     .tl_o,
 
     .reg2hw,
-    .hw2reg,
-
-    .intg_err_o (0)
+    .hw2reg
   );
 
   // Lifecycle sync
diff --git a/rtl/aon_timer_reg_top.sv b/rtl/aon_timer_reg_top.sv
index dd8ed28e41..2255dcf449 100644
--- a/rtl/aon_timer_reg_top.sv
+++ b/rtl/aon_timer_reg_top.sv
@@ -15,10 +15,7 @@ module aon_timer_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output aon_timer_reg_pkg::aon_timer_reg2hw_t reg2hw, // Write
-  input  aon_timer_reg_pkg::aon_timer_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  aon_timer_reg_pkg::aon_timer_hw2reg_t hw2reg  // Read
 );
 
   import aon_timer_reg_pkg::* ;
@@ -44,40 +41,6 @@ module aon_timer_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [13:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(14)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -118,7 +81,7 @@ module aon_timer_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -1151,26 +1114,6 @@ module aon_timer_reg_top (
   assign intr_test_wdog_timer_bark_wd = reg_wdata[1];
   assign wkup_cause_we = addr_hit[13] & reg_we & !reg_error;
 
-
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = alert_test_we;
-    reg_we_check[1] = wkup_ctrl_we;
-    reg_we_check[2] = wkup_thold_hi_we;
-    reg_we_check[3] = wkup_thold_lo_we;
-    reg_we_check[4] = wkup_count_hi_we;
-    reg_we_check[5] = wkup_count_lo_we;
-    reg_we_check[6] = wdog_regwen_we;
-    reg_we_check[7] = wdog_ctrl_we;
-    reg_we_check[8] = wdog_bark_thold_we;
-    reg_we_check[9] = wdog_bite_thold_we;
-    reg_we_check[10] = wdog_count_we;
-    reg_we_check[11] = intr_state_we;
-    reg_we_check[12] = intr_test_we;
-    reg_we_check[13] = wkup_cause_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
